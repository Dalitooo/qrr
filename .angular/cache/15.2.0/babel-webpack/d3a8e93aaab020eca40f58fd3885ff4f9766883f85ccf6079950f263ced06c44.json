{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Administrator/Desktop/an/qr-code-p/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { toDataURL, toCanvas, toString } from 'qrcode';\nimport * as i1 from '@angular/platform-browser';\nconst _c0 = [\"qrcElement\"];\nclass QRCodeComponent {\n  constructor(renderer, sanitizer) {\n    this.renderer = renderer;\n    this.sanitizer = sanitizer;\n    this.allowEmptyString = false;\n    this.colorDark = \"#000000ff\";\n    this.colorLight = \"#ffffffff\";\n    this.cssClass = \"qrcode\";\n    this.elementType = \"canvas\";\n    this.errorCorrectionLevel = \"M\";\n    this.margin = 4;\n    this.qrdata = \"\";\n    this.scale = 4;\n    this.width = 10;\n    this.qrCodeURL = new EventEmitter();\n    this.context = null;\n  }\n  ngOnChanges() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.createQRCode();\n    })();\n  }\n  isValidQrCodeText(data) {\n    if (this.allowEmptyString === false) {\n      return !(typeof data === \"undefined\" || data === \"\" || data === \"null\" || data === null);\n    }\n    return !(typeof data === \"undefined\");\n  }\n  toDataURL(qrCodeConfig) {\n    return new Promise((resolve, reject) => {\n      toDataURL(this.qrdata, qrCodeConfig, (err, url) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(url);\n        }\n      });\n    });\n  }\n  toCanvas(canvas, qrCodeConfig) {\n    return new Promise((resolve, reject) => {\n      toCanvas(canvas, this.qrdata, qrCodeConfig, error => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(\"success\");\n        }\n      });\n    });\n  }\n  toSVG(qrCodeConfig) {\n    return new Promise((resolve, reject) => {\n      toString(this.qrdata, qrCodeConfig, (err, url) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(url);\n        }\n      });\n    });\n  }\n  renderElement(element) {\n    for (const node of this.qrcElement.nativeElement.childNodes) {\n      this.renderer.removeChild(this.qrcElement.nativeElement, node);\n    }\n    this.renderer.appendChild(this.qrcElement.nativeElement, element);\n  }\n  createQRCode() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (_this2.version && _this2.version > 40) {\n        console.warn(\"[angularx-qrcode] max value for `version` is 40\");\n        _this2.version = 40;\n      } else if (_this2.version && _this2.version < 1) {\n        console.warn(\"[angularx-qrcode]`min value for `version` is 1\");\n        _this2.version = 1;\n      } else if (_this2.version !== undefined && isNaN(_this2.version)) {\n        console.warn(\"[angularx-qrcode] version should be a number, defaulting to auto.\");\n        _this2.version = undefined;\n      }\n      try {\n        if (!_this2.isValidQrCodeText(_this2.qrdata)) {\n          throw new Error(\"[angularx-qrcode] Field `qrdata` is empty, set 'allowEmptyString=\\\"true\\\"' to overwrite this behaviour.\");\n        }\n        if (_this2.isValidQrCodeText(_this2.qrdata) && _this2.qrdata === \"\") {\n          _this2.qrdata = \" \";\n        }\n        const config = {\n          color: {\n            dark: _this2.colorDark,\n            light: _this2.colorLight\n          },\n          errorCorrectionLevel: _this2.errorCorrectionLevel,\n          margin: _this2.margin,\n          scale: _this2.scale,\n          version: _this2.version,\n          width: _this2.width\n        };\n        const centerImageSrc = _this2.imageSrc;\n        const centerImageHeight = _this2.imageHeight || 40;\n        const centerImageWidth = _this2.imageWidth || 40;\n        switch (_this2.elementType) {\n          case \"canvas\":\n            const canvasElement = _this2.renderer.createElement(\"canvas\");\n            _this2.context = canvasElement.getContext(\"2d\");\n            _this2.toCanvas(canvasElement, config).then(() => {\n              if (_this2.ariaLabel) {\n                _this2.renderer.setAttribute(canvasElement, \"aria-label\", `${_this2.ariaLabel}`);\n              }\n              if (_this2.title) {\n                _this2.renderer.setAttribute(canvasElement, \"title\", `${_this2.title}`);\n              }\n              if (centerImageSrc && _this2.context) {\n                _this2.centerImage = new Image(centerImageWidth, centerImageHeight);\n                if (centerImageSrc !== _this2.centerImage.src) {\n                  _this2.centerImage.src = centerImageSrc;\n                }\n                if (centerImageHeight !== _this2.centerImage.height) {\n                  _this2.centerImage.height = centerImageHeight;\n                }\n                if (centerImageWidth !== _this2.centerImage.width) {\n                  _this2.centerImage.width = centerImageWidth;\n                }\n                const centerImage = _this2.centerImage;\n                if (centerImage) {\n                  centerImage.onload = () => {\n                    _this2.context?.drawImage(centerImage, canvasElement.width / 2 - centerImageWidth / 2, canvasElement.height / 2 - centerImageHeight / 2, centerImageWidth, centerImageHeight);\n                  };\n                }\n              }\n              _this2.renderElement(canvasElement);\n              _this2.emitQRCodeURL(canvasElement);\n            }).catch(e => {\n              console.error(\"[angularx-qrcode] canvas error:\", e);\n            });\n            break;\n          case \"svg\":\n            const svgParentElement = _this2.renderer.createElement(\"div\");\n            _this2.toSVG(config).then(svgString => {\n              _this2.renderer.setProperty(svgParentElement, \"innerHTML\", svgString);\n              const svgElement = svgParentElement.firstChild;\n              _this2.renderer.setAttribute(svgElement, \"height\", `${_this2.width}`);\n              _this2.renderer.setAttribute(svgElement, \"width\", `${_this2.width}`);\n              _this2.renderElement(svgElement);\n              _this2.emitQRCodeURL(svgElement);\n            }).catch(e => {\n              console.error(\"[angularx-qrcode] svg error:\", e);\n            });\n            break;\n          case \"url\":\n          case \"img\":\n          default:\n            const imgElement = _this2.renderer.createElement(\"img\");\n            _this2.toDataURL(config).then(dataUrl => {\n              if (_this2.alt) {\n                imgElement.setAttribute(\"alt\", _this2.alt);\n              }\n              if (_this2.ariaLabel) {\n                imgElement.setAttribute(\"aria-label\", _this2.ariaLabel);\n              }\n              imgElement.setAttribute(\"src\", dataUrl);\n              if (_this2.title) {\n                imgElement.setAttribute(\"title\", _this2.title);\n              }\n              _this2.renderElement(imgElement);\n              _this2.emitQRCodeURL(imgElement);\n            }).catch(e => {\n              console.error(\"[angularx-qrcode] img/url error:\", e);\n            });\n        }\n      } catch (e) {\n        console.error(\"[angularx-qrcode] Error generating QR Code:\", e.message);\n      }\n    })();\n  }\n  emitQRCodeURL(element) {\n    const className = element.constructor.name;\n    if (className === SVGSVGElement.name) {\n      const svgHTML = element.outerHTML;\n      const blob = new Blob([svgHTML], {\n        type: \"image/svg+xml\"\n      });\n      const urlSvg = URL.createObjectURL(blob);\n      const urlSanitized = this.sanitizer.bypassSecurityTrustUrl(urlSvg);\n      this.qrCodeURL.emit(urlSanitized);\n      return;\n    }\n    let urlImage = \"\";\n    if (className === HTMLCanvasElement.name) {\n      urlImage = element.toDataURL(\"image/png\");\n    }\n    if (className === HTMLImageElement.name) {\n      urlImage = element.src;\n    }\n    fetch(urlImage).then(urlResponse => urlResponse.blob()).then(blob => URL.createObjectURL(blob)).then(url => this.sanitizer.bypassSecurityTrustUrl(url)).then(urlSanitized => {\n      this.qrCodeURL.emit(urlSanitized);\n    }).catch(error => {\n      console.error(\"[angularx-qrcode] Error when fetching image/png URL: \" + error);\n    });\n  }\n}\nQRCodeComponent.ɵfac = function QRCodeComponent_Factory(t) {\n  return new (t || QRCodeComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.DomSanitizer));\n};\nQRCodeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: QRCodeComponent,\n  selectors: [[\"qrcode\"]],\n  viewQuery: function QRCodeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.qrcElement = _t.first);\n    }\n  },\n  inputs: {\n    allowEmptyString: \"allowEmptyString\",\n    colorDark: \"colorDark\",\n    colorLight: \"colorLight\",\n    cssClass: \"cssClass\",\n    elementType: \"elementType\",\n    errorCorrectionLevel: \"errorCorrectionLevel\",\n    imageSrc: \"imageSrc\",\n    imageHeight: \"imageHeight\",\n    imageWidth: \"imageWidth\",\n    margin: \"margin\",\n    qrdata: \"qrdata\",\n    scale: \"scale\",\n    version: \"version\",\n    width: \"width\",\n    alt: \"alt\",\n    ariaLabel: \"ariaLabel\",\n    title: \"title\"\n  },\n  outputs: {\n    qrCodeURL: \"qrCodeURL\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 2,\n  consts: [[\"qrcElement\", \"\"]],\n  template: function QRCodeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", null, 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.cssClass);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(QRCodeComponent, [{\n    type: Component,\n    args: [{\n      selector: \"qrcode\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: `<div #qrcElement [class]=\"cssClass\"></div>`\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i1.DomSanitizer\n    }];\n  }, {\n    allowEmptyString: [{\n      type: Input\n    }],\n    colorDark: [{\n      type: Input\n    }],\n    colorLight: [{\n      type: Input\n    }],\n    cssClass: [{\n      type: Input\n    }],\n    elementType: [{\n      type: Input\n    }],\n    errorCorrectionLevel: [{\n      type: Input\n    }],\n    imageSrc: [{\n      type: Input\n    }],\n    imageHeight: [{\n      type: Input\n    }],\n    imageWidth: [{\n      type: Input\n    }],\n    margin: [{\n      type: Input\n    }],\n    qrdata: [{\n      type: Input\n    }],\n    scale: [{\n      type: Input\n    }],\n    version: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    alt: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    qrCodeURL: [{\n      type: Output\n    }],\n    qrcElement: [{\n      type: ViewChild,\n      args: [\"qrcElement\", {\n        static: true\n      }]\n    }]\n  });\n})();\nclass QRCodeModule {}\nQRCodeModule.ɵfac = function QRCodeModule_Factory(t) {\n  return new (t || QRCodeModule)();\n};\nQRCodeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: QRCodeModule\n});\nQRCodeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(QRCodeModule, [{\n    type: NgModule,\n    args: [{\n      providers: [],\n      declarations: [QRCodeComponent],\n      exports: [QRCodeComponent]\n    }]\n  }], null, null);\n})();\nexport { QRCodeComponent, QRCodeModule };","map":{"version":3,"names":["i0","EventEmitter","Component","ChangeDetectionStrategy","Input","Output","ViewChild","NgModule","toDataURL","toCanvas","toString","i1","QRCodeComponent","constructor","renderer","sanitizer","allowEmptyString","colorDark","colorLight","cssClass","elementType","errorCorrectionLevel","margin","qrdata","scale","width","qrCodeURL","context","ngOnChanges","createQRCode","isValidQrCodeText","data","qrCodeConfig","Promise","resolve","reject","err","url","canvas","error","toSVG","renderElement","element","node","qrcElement","nativeElement","childNodes","removeChild","appendChild","version","console","warn","undefined","isNaN","Error","config","color","dark","light","centerImageSrc","imageSrc","centerImageHeight","imageHeight","centerImageWidth","imageWidth","canvasElement","createElement","getContext","then","ariaLabel","setAttribute","title","centerImage","Image","src","height","onload","drawImage","emitQRCodeURL","catch","e","svgParentElement","svgString","setProperty","svgElement","firstChild","imgElement","dataUrl","alt","message","className","name","SVGSVGElement","svgHTML","outerHTML","blob","Blob","type","urlSvg","URL","createObjectURL","urlSanitized","bypassSecurityTrustUrl","emit","urlImage","HTMLCanvasElement","HTMLImageElement","fetch","urlResponse","ɵfac","Renderer2","DomSanitizer","ɵcmp","args","selector","changeDetection","OnPush","template","static","QRCodeModule","ɵmod","ɵinj","providers","declarations","exports"],"sources":["C:/Users/Administrator/Desktop/an/qr-code-p/node_modules/angularx-qrcode/fesm2020/angularx-qrcode.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { toDataURL, toCanvas, toString } from 'qrcode';\nimport * as i1 from '@angular/platform-browser';\n\nclass QRCodeComponent {\n    constructor(renderer, sanitizer) {\n        this.renderer = renderer;\n        this.sanitizer = sanitizer;\n        this.allowEmptyString = false;\n        this.colorDark = \"#000000ff\";\n        this.colorLight = \"#ffffffff\";\n        this.cssClass = \"qrcode\";\n        this.elementType = \"canvas\";\n        this.errorCorrectionLevel = \"M\";\n        this.margin = 4;\n        this.qrdata = \"\";\n        this.scale = 4;\n        this.width = 10;\n        this.qrCodeURL = new EventEmitter();\n        this.context = null;\n    }\n    async ngOnChanges() {\n        await this.createQRCode();\n    }\n    isValidQrCodeText(data) {\n        if (this.allowEmptyString === false) {\n            return !(typeof data === \"undefined\" ||\n                data === \"\" ||\n                data === \"null\" ||\n                data === null);\n        }\n        return !(typeof data === \"undefined\");\n    }\n    toDataURL(qrCodeConfig) {\n        return new Promise((resolve, reject) => {\n            toDataURL(this.qrdata, qrCodeConfig, (err, url) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(url);\n                }\n            });\n        });\n    }\n    toCanvas(canvas, qrCodeConfig) {\n        return new Promise((resolve, reject) => {\n            toCanvas(canvas, this.qrdata, qrCodeConfig, (error) => {\n                if (error) {\n                    reject(error);\n                }\n                else {\n                    resolve(\"success\");\n                }\n            });\n        });\n    }\n    toSVG(qrCodeConfig) {\n        return new Promise((resolve, reject) => {\n            toString(this.qrdata, qrCodeConfig, (err, url) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(url);\n                }\n            });\n        });\n    }\n    renderElement(element) {\n        for (const node of this.qrcElement.nativeElement.childNodes) {\n            this.renderer.removeChild(this.qrcElement.nativeElement, node);\n        }\n        this.renderer.appendChild(this.qrcElement.nativeElement, element);\n    }\n    async createQRCode() {\n        if (this.version && this.version > 40) {\n            console.warn(\"[angularx-qrcode] max value for `version` is 40\");\n            this.version = 40;\n        }\n        else if (this.version && this.version < 1) {\n            console.warn(\"[angularx-qrcode]`min value for `version` is 1\");\n            this.version = 1;\n        }\n        else if (this.version !== undefined && isNaN(this.version)) {\n            console.warn(\"[angularx-qrcode] version should be a number, defaulting to auto.\");\n            this.version = undefined;\n        }\n        try {\n            if (!this.isValidQrCodeText(this.qrdata)) {\n                throw new Error(\"[angularx-qrcode] Field `qrdata` is empty, set 'allowEmptyString=\\\"true\\\"' to overwrite this behaviour.\");\n            }\n            if (this.isValidQrCodeText(this.qrdata) && this.qrdata === \"\") {\n                this.qrdata = \" \";\n            }\n            const config = {\n                color: {\n                    dark: this.colorDark,\n                    light: this.colorLight,\n                },\n                errorCorrectionLevel: this.errorCorrectionLevel,\n                margin: this.margin,\n                scale: this.scale,\n                version: this.version,\n                width: this.width,\n            };\n            const centerImageSrc = this.imageSrc;\n            const centerImageHeight = this.imageHeight || 40;\n            const centerImageWidth = this.imageWidth || 40;\n            switch (this.elementType) {\n                case \"canvas\":\n                    const canvasElement = this.renderer.createElement(\"canvas\");\n                    this.context = canvasElement.getContext(\"2d\");\n                    this.toCanvas(canvasElement, config)\n                        .then(() => {\n                        if (this.ariaLabel) {\n                            this.renderer.setAttribute(canvasElement, \"aria-label\", `${this.ariaLabel}`);\n                        }\n                        if (this.title) {\n                            this.renderer.setAttribute(canvasElement, \"title\", `${this.title}`);\n                        }\n                        if (centerImageSrc && this.context) {\n                            this.centerImage = new Image(centerImageWidth, centerImageHeight);\n                            if (centerImageSrc !== this.centerImage.src) {\n                                this.centerImage.src = centerImageSrc;\n                            }\n                            if (centerImageHeight !== this.centerImage.height) {\n                                this.centerImage.height = centerImageHeight;\n                            }\n                            if (centerImageWidth !== this.centerImage.width) {\n                                this.centerImage.width = centerImageWidth;\n                            }\n                            const centerImage = this.centerImage;\n                            if (centerImage) {\n                                centerImage.onload = () => {\n                                    this.context?.drawImage(centerImage, canvasElement.width / 2 - centerImageWidth / 2, canvasElement.height / 2 - centerImageHeight / 2, centerImageWidth, centerImageHeight);\n                                };\n                            }\n                        }\n                        this.renderElement(canvasElement);\n                        this.emitQRCodeURL(canvasElement);\n                    })\n                        .catch((e) => {\n                        console.error(\"[angularx-qrcode] canvas error:\", e);\n                    });\n                    break;\n                case \"svg\":\n                    const svgParentElement = this.renderer.createElement(\"div\");\n                    this.toSVG(config)\n                        .then((svgString) => {\n                        this.renderer.setProperty(svgParentElement, \"innerHTML\", svgString);\n                        const svgElement = svgParentElement.firstChild;\n                        this.renderer.setAttribute(svgElement, \"height\", `${this.width}`);\n                        this.renderer.setAttribute(svgElement, \"width\", `${this.width}`);\n                        this.renderElement(svgElement);\n                        this.emitQRCodeURL(svgElement);\n                    })\n                        .catch((e) => {\n                        console.error(\"[angularx-qrcode] svg error:\", e);\n                    });\n                    break;\n                case \"url\":\n                case \"img\":\n                default:\n                    const imgElement = this.renderer.createElement(\"img\");\n                    this.toDataURL(config)\n                        .then((dataUrl) => {\n                        if (this.alt) {\n                            imgElement.setAttribute(\"alt\", this.alt);\n                        }\n                        if (this.ariaLabel) {\n                            imgElement.setAttribute(\"aria-label\", this.ariaLabel);\n                        }\n                        imgElement.setAttribute(\"src\", dataUrl);\n                        if (this.title) {\n                            imgElement.setAttribute(\"title\", this.title);\n                        }\n                        this.renderElement(imgElement);\n                        this.emitQRCodeURL(imgElement);\n                    })\n                        .catch((e) => {\n                        console.error(\"[angularx-qrcode] img/url error:\", e);\n                    });\n            }\n        }\n        catch (e) {\n            console.error(\"[angularx-qrcode] Error generating QR Code:\", e.message);\n        }\n    }\n    emitQRCodeURL(element) {\n        const className = element.constructor.name;\n        if (className === SVGSVGElement.name) {\n            const svgHTML = element.outerHTML;\n            const blob = new Blob([svgHTML], { type: \"image/svg+xml\" });\n            const urlSvg = URL.createObjectURL(blob);\n            const urlSanitized = this.sanitizer.bypassSecurityTrustUrl(urlSvg);\n            this.qrCodeURL.emit(urlSanitized);\n            return;\n        }\n        let urlImage = \"\";\n        if (className === HTMLCanvasElement.name) {\n            urlImage = element.toDataURL(\"image/png\");\n        }\n        if (className === HTMLImageElement.name) {\n            urlImage = element.src;\n        }\n        fetch(urlImage)\n            .then((urlResponse) => urlResponse.blob())\n            .then((blob) => URL.createObjectURL(blob))\n            .then((url) => this.sanitizer.bypassSecurityTrustUrl(url))\n            .then((urlSanitized) => {\n            this.qrCodeURL.emit(urlSanitized);\n        })\n            .catch((error) => {\n            console.error(\"[angularx-qrcode] Error when fetching image/png URL: \" + error);\n        });\n    }\n}\nQRCodeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: QRCodeComponent, deps: [{ token: i0.Renderer2 }, { token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });\nQRCodeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.0\", type: QRCodeComponent, selector: \"qrcode\", inputs: { allowEmptyString: \"allowEmptyString\", colorDark: \"colorDark\", colorLight: \"colorLight\", cssClass: \"cssClass\", elementType: \"elementType\", errorCorrectionLevel: \"errorCorrectionLevel\", imageSrc: \"imageSrc\", imageHeight: \"imageHeight\", imageWidth: \"imageWidth\", margin: \"margin\", qrdata: \"qrdata\", scale: \"scale\", version: \"version\", width: \"width\", alt: \"alt\", ariaLabel: \"ariaLabel\", title: \"title\" }, outputs: { qrCodeURL: \"qrCodeURL\" }, viewQueries: [{ propertyName: \"qrcElement\", first: true, predicate: [\"qrcElement\"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: `<div #qrcElement [class]=\"cssClass\"></div>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: QRCodeComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"qrcode\",\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: `<div #qrcElement [class]=\"cssClass\"></div>`,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i1.DomSanitizer }]; }, propDecorators: { allowEmptyString: [{\n                type: Input\n            }], colorDark: [{\n                type: Input\n            }], colorLight: [{\n                type: Input\n            }], cssClass: [{\n                type: Input\n            }], elementType: [{\n                type: Input\n            }], errorCorrectionLevel: [{\n                type: Input\n            }], imageSrc: [{\n                type: Input\n            }], imageHeight: [{\n                type: Input\n            }], imageWidth: [{\n                type: Input\n            }], margin: [{\n                type: Input\n            }], qrdata: [{\n                type: Input\n            }], scale: [{\n                type: Input\n            }], version: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], alt: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], qrCodeURL: [{\n                type: Output\n            }], qrcElement: [{\n                type: ViewChild,\n                args: [\"qrcElement\", { static: true }]\n            }] } });\n\nclass QRCodeModule {\n}\nQRCodeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: QRCodeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nQRCodeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0\", ngImport: i0, type: QRCodeModule, declarations: [QRCodeComponent], exports: [QRCodeComponent] });\nQRCodeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: QRCodeModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: QRCodeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [],\n                    declarations: [QRCodeComponent],\n                    exports: [QRCodeComponent],\n                }]\n        }] });\n\nexport { QRCodeComponent, QRCodeModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}